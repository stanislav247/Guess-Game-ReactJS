{"version":3,"sources":["Components/Navbar.jsx","Components/RenderApp.js","Components/Menu.jsx","Components/Rules.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","state","className","this","props","mistakes","round","Component","RenderApp","questionMarks","sign","style","upper","lower","nextRound","randNum","Math","floor","random","setState","upperFunc","lowerFunc","pickedValue","color","buttonsShow","onClick","gameReset","map","qMark","type","Menu","start","isStarted","startGame","Link","to","Rules","App","Switch","Route","path","component","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1db26147.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Navbar extends Component {\r\n    state = {\r\n      \r\n      }\r\n\r\n      \r\n    render() { \r\n        return (\r\n         <div>\r\n            <nav className=\"navbar navbar-light bg-light justify-content-between\">\r\n                <a className=\"navbar-brand\">Guess Game</a> \r\n\r\n                <form className=\"form-inline my-2 my-lg-0\">\r\n                <button className=\"btn btn-outline-danger mr-sm-2 disabled mr-1\">Грешки: {this.props.mistakes}</button>\r\n                <button className=\"btn btn-outline-success my-2 my-sm-0 disabled\">Рунд: {this.props.round}</button>\r\n              </form>           \r\n            </nav>\r\n        </div> \r\n          );\r\n    }\r\n}\r\n \r\nexport default Navbar;","import React, { Component } from 'react';\r\nimport Navbar from './Navbar.jsx';\r\nimport { queries } from '@testing-library/react';\r\n\r\n\r\nclass RenderApp extends Component {\r\n    state = { \r\n        round:0,\r\n        questionMarks :[\r\n            {sign:'?' , style:'btn btn-success btn-lg ml-1'},\r\n            {sign:'?' , style:'btn btn-dark btn-lg ml-1'},\r\n            {sign:'?' , style:'btn btn-dark btn-lg ml-1'},\r\n            {sign:'?' , style:'btn btn-dark btn-lg ml-1'},\r\n            {sign:'?' , style:'btn btn-dark btn-lg ml-1'},\r\n            {sign:'?' , style:'btn btn-dark btn-lg ml-1'}\r\n        ],\r\n        upper:false,\r\n        lower:false,\r\n        mistakes: 0       \r\n     }\r\n\r\n   \r\n\r\n  nextRound=()=>{\r\n     const { questionMarks, upper, lower} = this.state ;\r\n\r\n     let round = this.state.round; \r\n     let mistakes = this.state.mistakes;\r\n     let randNum = Math.floor(Math.random() * 100) + 1;\r\n     \r\n     if(round == 0 && upper == false && lower == false){\r\n        questionMarks[round].sign = randNum;\r\n        round += 1 ;\r\n     }\r\n\r\n    else if(upper == true || lower == true){\r\n        questionMarks[round].sign = randNum;\r\n\r\n        if(upper == true && questionMarks[round].sign > questionMarks[round-1].sign){\r\n          questionMarks[round].style= 'btn btn-success btn-lg ml-1';\r\n          round += 1 ;  \r\n        }\r\n        else if(lower == true && questionMarks[round].sign < questionMarks[round-1].sign){\r\n          questionMarks[round].style= 'btn btn-success btn-lg ml-1';\r\n          round += 1 ;  \r\n        }\r\n        else if(upper == true && questionMarks[round].sign < questionMarks[round-1].sign){\r\n          questionMarks[round].style= 'btn btn-danger btn-lg ml-1';\r\n          round += 1 ;\r\n          mistakes += 1;  \r\n        }\r\n        else if(lower == true && questionMarks[round].sign > questionMarks[round-1].sign){\r\n          questionMarks[round].style= 'btn btn-danger btn-lg ml-1';\r\n          round += 1 ;\r\n          mistakes += 1;  \r\n        }\r\n               \r\n     }  \r\n       \r\n\r\n        this.setState({\r\n            round,\r\n            upper: false,\r\n            mistakes:mistakes,\r\n            lower: false,\r\n            questionMarks\r\n        });\r\n}\r\n\r\n  upperFunc=()=>{\r\n    this.setState({\r\n        upper: true,\r\n        lower: false\r\n    });\r\n}\r\n\r\n  lowerFunc=()=>{\r\n    this.setState({\r\n        upper: false,\r\n        lower: true,\r\n    });\r\n}\r\n\r\n  pickedValue=()=>{\r\n    if(this.state.upper == true){\r\n        return  <h2 style={{color: 'green'}}>По-голямо</h2>\r\n    }\r\n    else if (this.state.lower == true){\r\n        return  <h2 style={{color: 'red'}}>По-малко</h2>\r\n    }\r\n}\r\n\r\nbuttonsShow=()=>{\r\n  const {round, mistakes} = this.state ;\r\n    if(round == 0){\r\n        return <button className=\"btn btn-success mr-1\" onClick={this.nextRound}>Покажи</button>\r\n    }\r\n\r\n    else if(round == 6){\r\n      return (\r\n        <div>\r\n         <b>Завърши играта с брой грешки: {mistakes}</b><br/><br/>\r\n         <button className=\"btn btn-info\" onClick={this.gameReset}>Играй отново</button>\r\n       </div> \r\n      )\r\n   }\r\n\r\n    else if (round > 0){\r\n        return(\r\n              <div>\r\n              <button className=\"btn btn-success mr-4 ml-2\" onClick={this.upperFunc}>По-голямо</button> \r\n              <button className=\"btn btn-success mr-4\" onClick={this.nextRound}>Покажи</button> \r\n              <button className=\"btn btn-danger mr-4\" onClick={this.lowerFunc}>По-малко</button><br/><br/>\r\n              <b>Избрано:</b>\r\n              </div>\r\n        )\r\n    }\r\n}\r\n\r\ngameReset=()=>{\r\n  this.setState({\r\n    round:0,\r\n    questionMarks :[\r\n        {sign:'?' , style:'btn btn-success btn-lg ml-1'},\r\n        {sign:'?' , style:'btn btn-dark btn-lg ml-1'},\r\n        {sign:'?' , style:'btn btn-dark btn-lg ml-1'},\r\n        {sign:'?' , style:'btn btn-dark btn-lg ml-1'},\r\n        {sign:'?' , style:'btn btn-dark btn-lg ml-1'},\r\n        {sign:'?' , style:'btn btn-dark btn-lg ml-1'}\r\n    ],\r\n    upper:false,\r\n    lower:false,\r\n    mistakes: 0\r\n  });\r\n}\r\n\r\n\r\n    render() { \r\n      const {round,mistakes,questionMarks} = this.state ;\r\n        return ( \r\n            <>\r\n            \r\n            <Navbar round={round + 1} mistakes={mistakes}/>\r\n            <br/><br/><br/><br/>      \r\n            {questionMarks.map(qMark=>\r\n            <button type=\"button mt-5\" className={qMark.style}>{qMark.sign}</button>\r\n            )} \r\n            <br/><br/><br/><br/><br/><br/>\r\n             {this.buttonsShow()}\r\n            <br/>\r\n            {this.pickedValue()}\r\n                 \r\n              </>   \r\n            \r\n         );\r\n    }\r\n}\r\n \r\nexport default RenderApp;","import React, { Component } from 'react';\r\nimport RenderApp from './RenderApp.js';\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass Menu extends Component {\r\n\r\n    state = { \r\n        start: false\r\n     }\r\n\r\n\r\n    isStarted=()=>{\r\n        if(this.state.start == true){\r\n            return <RenderApp />\r\n        }\r\n        else if (this.state.start == false){\r\n            return (\r\n                <div className=\"container mt-5\">\r\n              <a className=\"navbar-brand\">Guess Game</a>  \r\n                <ul className=\"list-group\">\r\n                <li onClick={this.startGame}>\r\n                    <Link to=\"/playing\" className=\"btn btn-outline-info btn-lg btn-block mb-2\">Начало</Link>\r\n                </li>\r\n\r\n                <li>\r\n                    <Link to=\"/rules\" className=\"btn btn-outline-info btn-lg btn-block\">Правила</Link>\r\n                </li>        \r\n                </ul>\r\n        </div>\r\n            )\r\n        }\r\n     } \r\n\r\n     startGame=()=>{\r\n         this.setState({\r\n             start: true\r\n         });\r\n     }\r\n\r\n    render() { \r\n        return ( \r\n             this.isStarted()\r\n         );\r\n    }\r\n}\r\n \r\nexport default Menu;","import React, { Component } from 'react';\r\n\r\nconst Rules = () => {\r\n    return ( \r\n        <p className=\"mt-5 rules\">\r\n            Познайте дали следващото число е по-голямо или по-малко от предходното.\r\n            Числата са от 1 до 100.\r\n        </p>\r\n     );\r\n}\r\n \r\nexport default Rules;","import React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport RenderApp from './Components/RenderApp.js';\nimport Menu from './Components/Menu.jsx';\nimport { queries } from '@testing-library/react';\nimport {Route,Switch} from 'react-router-dom';\nimport Rules from './Components/Rules.jsx';\n\n\n\n\n\nclass App extends Component {\n\n    state ={\n\n    }\n\n \n\n  render(){ \n\n    return (  \n      \n\n          <>      \n            <div className=\"App mt-4\">\n               <Menu/>\n               <Switch>\n                  <Route path=\"/rules\" component={Rules}/>\n                  <Route path=\"/start\" />\n               </Switch>\n           </div>\n        </>\n     \n    );\n  }\n}\n \nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}